name: Project Mayhem CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/chaos-orchestrator

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort safety bandit
        
    - name: Code formatting check
      run: |
        black --check --diff src/
        isort --check-only --diff src/
        
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Security check with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
        
    - name: Dependency security check
      run: |
        safety check --json --output safety-report.json
        
    - name: Run unit tests
      run: |
        pytest src/tests/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: |
          htmlcov/
          bandit-report.json
          safety-report.json

  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:test
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chaos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Compose
      run: |
        docker-compose -f docker-compose.yaml up -d
        sleep 30  # Wait for services to start
        
    - name: Run integration tests
      run: |
        python -m pytest src/tests/test_integration.py -v
        
    - name: Test API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:5000/health
        
        # Test metrics endpoint
        curl -f http://localhost:5000/metrics
        
        # Test scenarios endpoint
        curl -f http://localhost:5000/scenarios
        
    - name: Cleanup
      if: always()
      run: docker-compose down

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        export IMAGE_TAG=${{ github.sha }}
        ./scripts/deploy_production.sh
        
    - name: Run smoke tests
      run: |
        # Wait for deployment
        kubectl wait --for=condition=available --timeout=300s deployment/chaos-orchestrator -n chaos-engineering-staging
        
        # Run basic smoke tests
        STAGING_URL="${{ secrets.STAGING_URL }}"
        curl -f "${STAGING_URL}/health"
        curl -f "${STAGING_URL}/scenarios"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        export IMAGE_TAG=${{ github.sha }}
        export REGISTRY=${{ env.REGISTRY }}
        ./scripts/deploy_production.sh
        
    - name: Run production health checks
      run: |
        # Wait for deployment
        kubectl wait --for=condition=available --timeout=300s deployment/chaos-orchestrator -n chaos-engineering
        
        # Run comprehensive health checks
        PRODUCTION_URL="${{ secrets.PRODUCTION_URL }}"
        curl -f "${PRODUCTION_URL}/health"
        curl -f "${PRODUCTION_URL}/scenarios"
        
        # Test with API key
        curl -f -H "X-API-Key: ${{ secrets.CHAOS_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"scenario": "cpu_spike", "duration": 1, "intensity": "low"}' \
          "${PRODUCTION_URL}/inject"
          
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "üöÄ Project Mayhem deployed to production successfully!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan, build-and-push, deploy-production]
    if: failure()
    
    steps:
    - name: Notify failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "‚ùå Project Mayhem pipeline failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
